import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Generate synthetic housing dataset
def generate_housing_data(n_samples=500):
    np.random.seed(42)
    square_footage = np.random.normal(1500, 500, n_samples)  # Average 1500 sqft
    bedrooms = np.random.randint(1, 6, n_samples)  # Between 1 and 5 bedrooms
    location = np.random.randint(1, 4, n_samples)  # Categorical location (1, 2, 3)
    noise = np.random.normal(0, 5000, n_samples)

    # Generate target prices based on features
    price = 50000 + (square_footage * 50) + (bedrooms * 10000) + (location * 20000) + noise

    data = pd.DataFrame({
        'SquareFootage': square_footage,
        'Bedrooms': bedrooms,
        'Location': location,
        'Price': price
    })
    return data

# Generate data
housing_data = generate_housing_data()

# Display dataset information
print("Dataset Preview:")
print(housing_data.head())

# Selecting relevant features
selected_features = ['SquareFootage', 'Bedrooms', 'Location']
target_column = 'Price'

X = housing_data[selected_features]
y = housing_data[target_column]

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("\nModel Performance:")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (R2): {r2:.2f}")

# Plot actual vs predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--r', linewidth=2)
plt.title("Actual vs Predicted Prices")
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.grid(True)
plt.show()

# Display model coefficients
coefficients = pd.DataFrame({"Feature": selected_features, "Coefficient": model.coef_})
print("\nModel Coefficients:")
print(coefficients)
